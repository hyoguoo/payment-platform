plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'com.hyoguoo'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // MySql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Spring Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    jvmArgs '-XX:+EnableDynamicAgentLoading', '-Xshare:off'
    useJUnitPlatform {
        excludeTags('TooLongIntegrationTest')
    }

    testLogging {
        afterSuite { testDescriptor, testResult ->
            if (testDescriptor.parent == null) {
                println "Results: ${testResult.resultType} (${testResult.testCount} tests, ${testResult.successfulTestCount} successes, ${testResult.failedTestCount} failures, ${testResult.skippedTestCount} skipped)"
            }
        }
    }

    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false

        html.outputLocation = layout.buildDirectory.dir('jacocoReports/html')
        xml.outputLocation = layout.buildDirectory.file('jacocoReports/jacoco.xml')
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            "*.Q*",
                            '**/dto/**',
                            '**/exception/**',
                            '**/infrastructure/**',
                            '**/presentation/**',
                            '**/enums/**',
                            '**/core/**',
                            '**/PaymentPlatformApplication.class'
                    ]
            )
        }))
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            excludes = [
                    "*.Q*",
                    "**/exception/**",
                    "**/dto/**",
                    "**/infrastructure/**",
                    "**/presentation/**",
                    "**/enums/**",
                    "**/core/**",
                    "**.PaymentPlatformApplication.class"
            ]
        }
    }
}
