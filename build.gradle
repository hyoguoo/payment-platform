plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'com.hyoguoo'
version = '1.0.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('testcontainersVersion', '1.19.8')
    set('springdocVersion', '2.5.0')
    set('logstashEncoderVersion', '7.4')
    set('querydslVersion', '5.0.0')
}

dependencies {
    // Spring Boot Core
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Development Tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Template Engine
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // API Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Database
    runtimeOnly 'com.mysql:mysql-connector-j'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashEncoderVersion}"

    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
}

// Test Configuration
test {
    useJUnitPlatform()

    jvmArgs '-XX:+EnableDynamicAgentLoading', '-Xshare:off'

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false

        afterSuite { desc, result ->
            if (!desc.parent) {
                println "\nTest Results: ${result.resultType} " +
                        "(${result.testCount} tests, " +
                        "${result.successfulTestCount} passed, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped)"
            }
        }
    }

    finalizedBy jacocoTestReport
}

// JaCoCo Configuration
jacoco {
    toolVersion = '0.8.11'
}

jacocoTestReport {
    dependsOn test

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, excludes: [
                        '**/Q*',
                        '**/dto/**',
                        '**/entity/**',
                        '**/exception/**',
                        '**/infrastructure/**',
                        '**/enums/**',
                        '**/PaymentPlatformApplication.class'
                ])
            })
    )

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            excludes = [
                    '*.Q*',
                    '**/dto/**',
                    '**/entity/**',
                    '**/exception/**',
                    '**/infrastructure/**',
                    '**/enums/**',
                    '**/PaymentPlatformApplication'
            ]
        }
    }
}
