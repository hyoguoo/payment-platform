package com.hyoguoo.paymentplatform.mock;

import com.hyoguoo.paymentplatform.product.application.port.ProductRepository;
import com.hyoguoo.paymentplatform.product.domain.Product;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class FakeProductRepository implements ProductRepository {

    private final Map<Long, Product> database = new HashMap<>();
    private Long autoGeneratedId = 1L;

    @Override
    public Optional<Product> findById(Long id) {
        return Optional.ofNullable(database.get(id));
    }

    // FakeRepository에서는 동시성 관련 로직을 구현하지 않으므로 findById와 동일한 로직을 사용
    @Override
    public Optional<Product> findByIdPessimistic(Long id) {
        return Optional.ofNullable(database.get(id));
    }

    @Override
    public Product saveOrUpdate(Product product) {
        if (product.getId() == null) {
            product = Product.allArgsBuilder()
                    .id(autoGeneratedId)
                    .name(product.getName())
                    .price(product.getPrice())
                    .allArgsBuild();
            autoGeneratedId++;
        }
        database.put(product.getId(), product);
        return product;
    }

    @Override
    public void saveAll(List<Product> productList) {
        for (Product product : productList) {
            saveOrUpdate(product);
        }
    }
}
